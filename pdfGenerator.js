const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// Ensure output directory exists
function ensureOutputDir() {
    const outputDir = path.join(__dirname, 'generated-pdfs');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    return outputDir;
}

// Generate PDF with 2-column layout, bold title, 11pt font
async function generatePDF(song) {
    return new Promise((resolve, reject) => {
        try {
            const outputDir = ensureOutputDir();
            const fileName = `${song.title.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`;
            const filePath = path.join(outputDir, fileName);
            
            // Create PDF document - 8.5 x 11 inches (US Letter)
            const doc = new PDFDocument({
                size: [612, 792], // 8.5" x 11" in points (72 points per inch)
                margins: {
                    top: 50,
                    bottom: 50,
                    left: 40,
                    right: 40
                }
            });
            
            // Pipe to file
            doc.pipe(fs.createWriteStream(filePath));
            
            // Page dimensions
            const pageWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
            const columnWidth = (pageWidth - 20) / 2; // 20px gap between columns
            const leftColumnX = doc.page.margins.left;
            const rightColumnX = leftColumnX + columnWidth + 20;
            
            // Title - Bold and centered
            doc.fontSize(16)
               .font('Helvetica-Bold')
               .text(song.title.toUpperCase(), leftColumnX, doc.y, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Artist - Below title
            doc.fontSize(12)
               .font('Helvetica')
               .text(`by ${song.artist}`, leftColumnX, doc.y + 5, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Add some space
            doc.moveDown(2);
            
            // Set font for lyrics - 11pt as requested
            doc.fontSize(11)
               .font('Helvetica');
            
            // Flow text in columns like Microsoft Word
            const allLines = song.lyrics || [];
            renderInWordStyleColumns(doc, allLines, leftColumnX, rightColumnX, columnWidth);
            
            // Footer
            doc.fontSize(8)
               .font('Helvetica')
               .text(`Generated by Discord Song Bot - ${new Date().toLocaleDateString()}`, 
                     leftColumnX, doc.page.height - 30, {
                       width: pageWidth,
                       align: 'center'
                     });
            
            // Finalize PDF
            doc.end();
            
            // Wait for PDF to be written
            doc.on('end', () => {
                console.log(`âœ… PDF generated: ${fileName}`);
                resolve(filePath);
            });
            
            doc.on('error', (error) => {
                console.error('PDF generation error:', error);
                reject(error);
            });
            
        } catch (error) {
            console.error('Error in generatePDF:', error);
            reject(error);
        }
    });
}

// Microsoft Word style column rendering with smart chord-lyrics grouping
function renderInWordStyleColumns(doc, lines, leftColumnX, rightColumnX, columnWidth) {
    const pageHeight = doc.page.height;
    const bottomMargin = 60; // Reduced from 100 to 60
    const topMargin = 50;    // Reduced from 120 to 50
    
    let currentX = leftColumnX;
    let currentY = doc.y;
    let isRightColumn = false;
    let pageStartY = currentY;
    
    console.log(`ðŸ“° Starting smart chord-lyrics rendering...`);
    
    // Group lines into chord-lyrics pairs and standalone items
    const groups = groupChordLyricsPairs(lines);
    
    for (let i = 0; i < groups.length; i++) {
        const group = groups[i];
        
        // Calculate total height needed for this group
        const groupHeight = calculateGroupHeight(doc, group, columnWidth);
        
        console.log(`ðŸ“¦ Group ${i}: type=${group.type}, lines=${group.lines.length}, height=${groupHeight.toFixed(1)}`);
        
        // Check if group fits in current column (with some extra buffer)
        const wouldExceedPage = (currentY + groupHeight + 20) > (pageHeight - bottomMargin);
        
        if (wouldExceedPage) {
            if (!isRightColumn) {
                // Move to right column
                console.log(`ðŸ”„ Moving group ${i} to right column`);
                currentX = rightColumnX;
                currentY = pageStartY;
                isRightColumn = true;
                
                // Check if it fits in right column
                if ((currentY + groupHeight) > (pageHeight - bottomMargin)) {
                    console.log(`ðŸ“„ Group ${i} needs new page`);
                    doc.addPage();
                    currentX = leftColumnX;
                    currentY = topMargin;
                    pageStartY = currentY;
                    isRightColumn = false;
                }
            } else {
                // Need new page
                console.log(`ðŸ“„ Group ${i} needs new page`);
                doc.addPage();
                currentX = leftColumnX;
                currentY = topMargin;
                pageStartY = currentY;
                isRightColumn = false;
            }
        }
        
        // Render the entire group together
        currentY = renderGroup(doc, group, currentX, currentY, columnWidth);
        doc.y = currentY;
    }
    
    console.log(`âœ… Smart rendering complete. Final Y: ${currentY.toFixed(1)}`);
}

// Group lines into logical sections with headers staying with their content
function groupChordLyricsPairs(lines) {
    const groups = [];
    let i = 0;
    
    while (i < lines.length) {
        const currentLine = lines[i].trim();
        
        // Section headers - collect header + following content as one group
        if (currentLine.startsWith('[') && currentLine.endsWith(']')) {
            const sectionGroup = {
                type: 'section-block',
                lines: [lines[i]], // Start with header
                hasContent: false
            };
            
            i++; // Move past header
            
            // Collect all content until next section or end
            while (i < lines.length) {
                const nextLine = lines[i].trim();
                
                // Stop if we hit another section header
                if (nextLine.startsWith('[') && nextLine.endsWith(']')) {
                    break;
                }
                
                sectionGroup.lines.push(lines[i]);
                
                // Mark that this section has content (not just empty lines)
                if (nextLine !== '') {
                    sectionGroup.hasContent = true;
                }
                
                i++;
            }
            
            console.log(`ðŸ“‚ Section block: "${currentLine}" with ${sectionGroup.lines.length - 1} content lines`);
            groups.push(sectionGroup);
        }
        // Handle orphaned content (content without section header)
        else {
            // For content without a section header, use the old logic
            if (currentLine === '') {
                groups.push({
                    type: 'empty',
                    lines: [lines[i]]
                });
                i++;
            }
            // Chord line - check if next line is lyrics
            else if (isChordLine(currentLine)) {
                const nextLine = i + 1 < lines.length ? lines[i + 1].trim() : '';
                
                if (nextLine && !nextLine.startsWith('[') && !nextLine.endsWith(']') && !isChordLine(nextLine)) {
                    // Chord-lyrics pair
                    groups.push({
                        type: 'chord-lyrics',
                        lines: [lines[i], lines[i + 1]]
                    });
                    i += 2; // Skip both lines
                    console.log(`ðŸŽµ Orphaned chord-lyrics pair: "${currentLine}" + "${nextLine}"`);
                } else {
                    // Standalone chord
                    groups.push({
                        type: 'chord',
                        lines: [lines[i]]
                    });
                    i++;
                }
            }
            // Regular lyrics line
            else {
                groups.push({
                    type: 'lyrics',
                    lines: [lines[i]]
                });
                i++;
            }
        }
    }
    
    console.log(`ðŸ“Š Created ${groups.length} groups from ${lines.length} lines`);
    return groups;
}

// Calculate total height needed for a group
function calculateGroupHeight(doc, group, columnWidth) {
    let totalHeight = 0;
    
    // For section blocks, we need to be more careful about height calculation
    if (group.type === 'section-block') {
        for (let i = 0; i < group.lines.length; i++) {
            const line = group.lines[i];
            const trimmedLine = line.trim();
            
            if (trimmedLine === '') {
                totalHeight += doc.currentLineHeight() * 0.5;
            } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
                // Section header gets extra space (reduced padding)
                const textHeight = doc.heightOfString(line, { width: columnWidth });
                totalHeight += Math.max(textHeight, doc.currentLineHeight()) + 4; // Reduced from 8 to 4
            } else {
                const textHeight = doc.heightOfString(line, { width: columnWidth });
                totalHeight += Math.max(textHeight, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            }
        }
        
        // Add some padding for section blocks (reduced)
        totalHeight += 2; // Reduced from 5 to 2
    } else {
        // Original logic for other group types
        for (const line of group.lines) {
            const trimmedLine = line.trim();
            
            if (trimmedLine === '') {
                totalHeight += doc.currentLineHeight() * 0.5;
            } else {
                const textHeight = doc.heightOfString(line, { width: columnWidth });
                totalHeight += Math.max(textHeight, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            }
        }
        
        // Add extra space for section headers (reduced)
        if (group.type === 'section') {
            totalHeight += 4; // Reduced from 8 to 4
        }
        
        // Add small gap between chord-lyrics pairs
        if (group.type === 'chord-lyrics') {
            totalHeight += 1; // Reduced from 2 to 1
        }
    }
    
    return totalHeight;
}

// Render a complete group (keeping related content together)
function renderGroup(doc, group, x, startY, columnWidth) {
    let currentY = startY;
    
    // Handle section blocks specially
    if (group.type === 'section-block') {
        console.log(`ðŸ“‹ Rendering section block with ${group.lines.length} lines`);
        
        for (let i = 0; i < group.lines.length; i++) {
            const line = group.lines[i];
            const trimmedLine = line.trim();
            
            doc.x = x;
            doc.y = currentY;
            
            if (trimmedLine === '') {
                currentY += doc.currentLineHeight() * 0.5;
            } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
                // Section header - bold with extra space
                console.log(`ðŸ“Œ Section header: "${trimmedLine}"`);
                doc.font('Helvetica-Bold');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                doc.font('Helvetica');
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 4; // Reduced from 8 to 4
            } else if (isChordLine(trimmedLine)) {
                // Chord line in section
                doc.font('Helvetica-Bold');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                doc.font('Helvetica');
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            } else {
                // Lyrics line in section
                doc.font('Helvetica');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            }
        }
        
        // Add some space after section block (reduced)
        currentY += 2; // Reduced from 5 to 2
    } else {
        // Original rendering for other group types
        for (let i = 0; i < group.lines.length; i++) {
            const line = group.lines[i];
            const trimmedLine = line.trim();
            
            doc.x = x;
            doc.y = currentY;
            
            if (trimmedLine === '') {
                currentY += doc.currentLineHeight() * 0.5;
            } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
                // Section header
                doc.font('Helvetica-Bold');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                doc.font('Helvetica');
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 4; // Reduced from 8 to 4
            } else if (isChordLine(trimmedLine)) {
                // Chord line
                doc.font('Helvetica-Bold');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                doc.font('Helvetica');
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            } else {
                // Lyrics line
                doc.font('Helvetica');
                const beforeY = currentY;
                doc.text(line, x, currentY, { width: columnWidth });
                const afterY = doc.y;
                currentY = beforeY + Math.max(afterY - beforeY, doc.currentLineHeight()) + 1; // Reduced from 3 to 1
            }
        }
        
        // Add small gap after chord-lyrics pairs (reduced)
        if (group.type === 'chord-lyrics') {
            currentY += 1; // Reduced from 2 to 1
        }
    }
    
    return currentY;
}

// Check if a line contains chords - Simplified and more accurate
function isChordLine(line) {
    const trimmed = line.trim();
    
    // Empty lines are not chord lines
    if (trimmed.length === 0) return false;
    
    // Section headers are not chord lines
    if (trimmed.startsWith('[') && trimmed.endsWith(']')) return false;
    
    // Simple chord patterns - much more permissive
    const basicChordPattern = /\b[A-G][#b]?(m|maj|min|sus|aug|dim|add|[0-9])*\b/g;
    const chordMatches = trimmed.match(basicChordPattern);
    
    if (!chordMatches) return false;
    
    // Count words in the line
    const words = trimmed.split(/\s+/).filter(word => word.length > 0);
    const chordCount = chordMatches.length;
    
    // Very simple rules:
    // 1. If more than half the words are chords, it's a chord line
    // 2. If it's a short line (â‰¤ 20 chars) with any chords, it's probably chords
    // 3. If it has 2+ chords and no common lyrics words, it's chords
    
    const chordRatio = chordCount / words.length;
    const isShort = trimmed.length <= 20;
    const hasCommonLyrics = /\b(the|and|you|me|my|i|a|to|in|is|of|for|with|will|love|lord|jesus|your|than|all|name)\b/i.test(trimmed);
    
    // Chord line if:
    return (chordRatio >= 0.5) ||                    // More than half words are chords
           (isShort && chordCount >= 1) ||          // Short line with any chords
           (chordCount >= 2 && !hasCommonLyrics);   // Multiple chords, no lyrics words
}

module.exports = {
    generatePDF,
    isChordLine
};
