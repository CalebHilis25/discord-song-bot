const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// Ensure output directory exists
function ensureOutputDir() {
    const outputDir = path.join(__dirname, 'generated-pdfs');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    return outputDir;
}

// Generate PDF with 2-column layout, bold title, 11pt font
async function generatePDF(song) {
    return new Promise((resolve, reject) => {
        try {
            const outputDir = ensureOutputDir();
            const fileName = `${song.title.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`;
            const filePath = path.join(outputDir, fileName);
            
            // Create PDF document - 8.5 x 11 inches (US Letter)
            const doc = new PDFDocument({
                size: [612, 792], // 8.5" x 11" in points (72 points per inch)
                margins: {
                    top: 50,
                    bottom: 50,
                    left: 40,
                    right: 40
                }
            });
            
            // Pipe to file
            doc.pipe(fs.createWriteStream(filePath));
            
            // Page dimensions
            const pageWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
            const columnWidth = (pageWidth - 20) / 2; // 20px gap between columns
            const leftColumnX = doc.page.margins.left;
            const rightColumnX = leftColumnX + columnWidth + 20;
            
            // Title - Bold and centered
            doc.fontSize(16)
               .font('Helvetica-Bold')
               .text(song.title.toUpperCase(), leftColumnX, doc.y, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Artist - Below title
            doc.fontSize(12)
               .font('Helvetica')
               .text(`by ${song.artist}`, leftColumnX, doc.y + 5, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Add some space
            doc.moveDown(2);
            
            // Set font for lyrics - 11pt as requested
            doc.fontSize(11)
               .font('Helvetica');
            
            // Process lyrics into sections for intelligent column splitting
            const sections = groupLyricsIntoSections(song.lyrics || []);
            
            // Intelligent column distribution
            const { leftSections, rightSections } = distributeIntoColumns(sections, doc, columnWidth);
            
            // Current Y position for both columns
            let currentY = doc.y;
            const startY = currentY;
            
            // Render Left Column
            doc.x = leftColumnX;
            doc.y = currentY;
            renderSections(doc, leftSections, leftColumnX, columnWidth);
            
            // Render Right Column
            doc.x = rightColumnX;
            doc.y = startY;
            renderSections(doc, rightSections, rightColumnX, columnWidth);
            
            // Footer
            doc.fontSize(8)
               .font('Helvetica')
               .text(`Generated by Discord Song Bot - ${new Date().toLocaleDateString()}`, 
                     leftColumnX, doc.page.height - 30, {
                       width: pageWidth,
                       align: 'center'
                     });
            
            // Finalize PDF
            doc.end();
            
            // Wait for PDF to be written
            doc.on('end', () => {
                console.log(`âœ… PDF generated: ${fileName}`);
                resolve(filePath);
            });
            
            doc.on('error', (error) => {
                console.error('PDF generation error:', error);
                reject(error);
            });
            
        } catch (error) {
            console.error('Error in generatePDF:', error);
            reject(error);
        }
    });
}

// Group lyrics into logical sections
function groupLyricsIntoSections(lyrics) {
    const sections = [];
    let currentSection = [];
    
    for (const line of lyrics) {
        const trimmedLine = line.trim();
        
        // If we hit a section header and have content, save current section
        if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']') && currentSection.length > 0) {
            sections.push([...currentSection]);
            currentSection = [line];
        } else {
            currentSection.push(line);
        }
    }
    
    // Add the last section
    if (currentSection.length > 0) {
        sections.push(currentSection);
    }
    
    return sections;
}

// Estimate section height for column distribution
function estimateSectionHeight(section, doc, width) {
    let height = 0;
    const lineHeight = doc.currentLineHeight();
    
    for (const line of section) {
        const trimmedLine = line.trim();
        
        if (trimmedLine === '') {
            height += lineHeight * 0.5; // Empty line spacing
        } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
            height += lineHeight * 1.5; // Section header with extra space
        } else {
            height += lineHeight;
        }
    }
    
    height += lineHeight; // Extra space after section
    return height;
}

// Distribute sections sequentially to maintain song order
function distributeIntoColumns(sections, doc, columnWidth) {
    const maxColumnHeight = doc.page.height - 200; // Leave room for header/footer
    let currentHeight = 0;
    const leftSections = [];
    const rightSections = [];
    let useRightColumn = false;
    
    for (const section of sections) {
        const sectionHeight = estimateSectionHeight(section, doc, columnWidth);
        
        // If this section would overflow the current column, switch to right column
        if (!useRightColumn && currentHeight + sectionHeight > maxColumnHeight) {
            useRightColumn = true;
            currentHeight = 0; // Reset height for right column
        }
        
        // Add section to appropriate column in original order
        if (useRightColumn) {
            rightSections.push(section);
        } else {
            leftSections.push(section);
        }
        
        currentHeight += sectionHeight;
    }
    
    return { leftSections, rightSections };
}

// Render sections with proper formatting
function renderSections(doc, sections, columnX, columnWidth) {
    for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        
        // Add space before section (except first one)
        if (i > 0) {
            doc.moveDown(1);
        }
        
        for (const line of section) {
            const trimmedLine = line.trim();
            
            if (trimmedLine === '') {
                // Empty line - small space
                doc.moveDown(0.3);
            } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
                // Section headers - BOLD (as requested)
                doc.font('Helvetica-Bold')
                   .text(line, columnX, doc.y, { width: columnWidth });
                doc.font('Helvetica');
                doc.moveDown(0.2);
            } else if (isChordLine(trimmedLine)) {
                // Chord lines - BOLD (as requested)
                doc.font('Helvetica-Bold')
                   .text(line, columnX, doc.y, { width: columnWidth });
                doc.font('Helvetica');
            } else {
                // Lyrics - NORMAL font (as requested)
                doc.font('Helvetica')
                   .text(line, columnX, doc.y, { width: columnWidth });
            }
        }
    }
}

// Check if a line contains chords - Smart detection
function isChordLine(line) {
    const trimmed = line.trim();
    
    // Empty lines are not chord lines
    if (trimmed.length === 0) return false;
    
    // Section headers are not chord lines
    if (trimmed.startsWith('[') && trimmed.endsWith(']')) return false;
    
    // Look for chord patterns
    const chordPatterns = [
        /\b[A-G][#b]?(m|maj|min|sus|aug|dim|add)?[0-9]?\b/g,  // Standard chords
        /\b[A-G][#b]?\/[A-G][#b]?\b/g,                        // Slash chords like C/G
        /\b[A-G][#b]?\s+[A-G][#b]?\b/g                        // Space-separated chords
    ];
    
    let chordCount = 0;
    for (const pattern of chordPatterns) {
        const matches = trimmed.match(pattern);
        if (matches) chordCount += matches.length;
    }
    
    // Check for common lyric words that indicate it's NOT a chord line
    const lyricWords = /\b(the|and|you|me|my|i|a|to|in|is|of|for|with|will|love|god|lord|jesus|heart|life|time|way|day|night|see|know|come|go|take|give|said|say|never|always|every|all|when|where|what|how|why|can|could|would|should|was|were|been|being|have|has|had|do|does|did|get|got|make|made|let|put|call|find|keep|feel|think|want|need|help|tell|ask|try|turn|look|show|work|play|move|live|die|born|sing|dance|walk|run|fly|fall|rise|stand|sit|lay|sleep|wake|dream|hope|pray|praise|worship|holy|spirit|heaven|earth|water|fire|light|dark|sun|moon|star|sky|mountain|valley|river|ocean|tree|flower|bird|wind|rain|snow|peace|joy|grace|mercy|faith|truth|power|glory|name|word|voice|hand|eye|face|soul)\b/i;
    
    // Strong indicators this is a chord line:
    // 1. Has multiple chord patterns
    // 2. Relatively short line
    // 3. Doesn't contain many lyric words
    // 4. Has chord-like spacing patterns
    
    const hasMultipleChords = chordCount >= 2;
    const isShortLine = trimmed.length <= 60;
    const hasLyricWords = lyricWords.test(trimmed);
    const hasChordSpacing = /^[A-G][#b]?(\w{0,3})\s+[A-G][#b]?(\w{0,3})/.test(trimmed);
    
    // Chord line if:
    // - Has multiple chords AND is short AND doesn't have lyric words
    // - OR has chord spacing pattern
    // - OR line is mostly chord symbols (high chord density)
    
    const chordDensity = chordCount / trimmed.split(' ').length;
    
    return (hasMultipleChords && isShortLine && !hasLyricWords) ||
           hasChordSpacing ||
           chordDensity > 0.6;
}

module.exports = {
    generatePDF,
    groupLyricsIntoSections,
    estimateSectionHeight,
    distributeIntoColumns,
    renderSections,
    isChordLine
};
