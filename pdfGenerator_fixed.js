const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// Ensure output directory exists
function ensureOutputDir() {
    const outputDir = path.join(__dirname, 'generated-pdfs');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    return outputDir;
}

// Generate PDF with 2-column layout, bold title, 11pt font
async function generatePDF(song) {
    return new Promise((resolve, reject) => {
        try {
            const outputDir = ensureOutputDir();
            const fileName = `${song.title.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.pdf`;
            const filePath = path.join(outputDir, fileName);
            
            // Create PDF document - 8.5 x 11 inches (US Letter)
            const doc = new PDFDocument({
                size: [612, 792], // 8.5" x 11" in points (72 points per inch)
                margins: {
                    top: 50,
                    bottom: 50,
                    left: 40,
                    right: 40
                }
            });
            
            // Pipe to file
            doc.pipe(fs.createWriteStream(filePath));
            
            // Page dimensions
            const pageWidth = doc.page.width - doc.page.margins.left - doc.page.margins.right;
            const columnWidth = (pageWidth - 20) / 2; // 20px gap between columns
            const leftColumnX = doc.page.margins.left;
            const rightColumnX = leftColumnX + columnWidth + 20;
            
            // Title - Bold and centered
            doc.fontSize(16)
               .font('Helvetica-Bold')
               .text(song.title.toUpperCase(), leftColumnX, doc.y, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Artist - Below title
            doc.fontSize(12)
               .font('Helvetica')
               .text(`by ${song.artist}`, leftColumnX, doc.y + 5, {
                   width: pageWidth,
                   align: 'center'
               });
            
            // Add some space
            doc.moveDown(2);
            
            // Set font for lyrics - 11pt as requested
            doc.fontSize(11)
               .font('Helvetica');
            
            // Flow text in columns like Microsoft Word with section spacing
            const allLines = song.lyrics || [];
            const linesWithSpacing = addSectionSpacing(allLines);
            renderInWordStyleColumns(doc, linesWithSpacing, leftColumnX, rightColumnX, columnWidth);
            
            // Footer
            doc.fontSize(8)
               .font('Helvetica')
               .text(`Generated by Discord Song Bot - ${new Date().toLocaleDateString()}`, 
                     leftColumnX, doc.page.height - 30, {
                       width: pageWidth,
                       align: 'center'
                     });
            
            // Finalize PDF
            doc.end();
            
            // Wait for PDF to be written
            doc.on('end', () => {
                console.log(`✅ PDF generated: ${fileName}`);
                resolve(filePath);
            });
            
            doc.on('error', (error) => {
                console.error('PDF generation error:', error);
                reject(error);
            });
            
        } catch (error) {
            console.error('Error in generatePDF:', error);
            reject(error);
        }
    });
}

// Add spacing between song sections (1 empty line after each section block)
function addSectionSpacing(lines) {
    const linesWithSpacing = [];
    
    for (let i = 0; i < lines.length; i++) {
        const currentLine = lines[i];
        const nextLine = i < lines.length - 1 ? lines[i + 1] : '';
        const trimmedCurrent = currentLine.trim();
        const trimmedNext = nextLine.trim();
        
        // Add current line
        linesWithSpacing.push(currentLine);
        
        // Add spacing after section blocks (when next line is a section header)
        if (trimmedCurrent !== '' && trimmedNext !== '') {
            if (trimmedNext.startsWith('[') && trimmedNext.endsWith(']')) {
                // Next line is a new section header, add spacing
                linesWithSpacing.push(''); // Add empty line for spacing
                console.log(`📏 Added section spacing after: "${trimmedCurrent.substring(0, 30)}..."`);
            }
        }
    }
    
    console.log(`✨ Added section spacing: ${lines.length} → ${linesWithSpacing.length} lines`);
    return linesWithSpacing;
}

// Simple Microsoft Word style column rendering - line by line flow with section spacing
function renderInWordStyleColumns(doc, lines, leftColumnX, rightColumnX, columnWidth) {
    const startY = doc.y;
    const bottomMargin = 80;
    const maxY = doc.page.height - bottomMargin;
    
    let currentX = leftColumnX;  // Start in left column
    let currentY = startY;
    let isRightColumn = false;
    
    console.log(`📰 Simple Word-style columns with section spacing: startY=${startY}, maxY=${maxY}`);
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const trimmedLine = line.trim();
        
        // Calculate height needed for this line
        const lineHeight = doc.currentLineHeight();
        
        // Check if this line will fit in current column
        const willFitInCurrentColumn = (currentY + lineHeight) <= maxY;
        
        // If line won't fit and we're in left column, switch to right
        if (!willFitInCurrentColumn && !isRightColumn) {
            console.log(`🔄 Switching to right column at line ${i}: "${trimmedLine.substring(0, 30)}..."`);
            currentX = rightColumnX;
            currentY = startY;
            isRightColumn = true;
        }
        // If line won't fit and we're in right column, new page
        else if (!willFitInCurrentColumn && isRightColumn) {
            console.log(`📄 New page needed at line ${i}`);
            doc.addPage();
            currentX = leftColumnX;
            currentY = doc.y;
            isRightColumn = false;
        }
        
        // Set position and render the line
        doc.x = currentX;
        doc.y = currentY;
        
        if (trimmedLine === '') {
            // Empty line - spacing (from section spacing feature)
            currentY += lineHeight * 0.6;
            console.log(`📏 Empty line spacing at y=${currentY.toFixed(1)}`);
        } else if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
            // Section headers - BOLD
            doc.font('Helvetica-Bold');
            doc.text(line, currentX, currentY, { width: columnWidth });
            doc.font('Helvetica');
            currentY = doc.y + (lineHeight * 0.1); // Small space after headers
        } else if (isChordLine(trimmedLine)) {
            // Chord lines - BOLD
            doc.font('Helvetica-Bold');
            doc.text(line, currentX, currentY, { width: columnWidth });
            doc.font('Helvetica');
            currentY = doc.y;
        } else {
            // Lyrics - NORMAL font
            doc.font('Helvetica');
            doc.text(line, currentX, currentY, { width: columnWidth });
            currentY = doc.y;
        }
        
        console.log(`📝 Line ${i}: "${trimmedLine.substring(0, 20)}..." at y=${currentY.toFixed(1)} in ${isRightColumn ? 'RIGHT' : 'LEFT'} column`);
    }
    
    console.log(`✅ Simple Word-style rendering complete. Final position: column=${isRightColumn ? 'right' : 'left'}, y=${currentY}`);
}

// Check if a line contains chords
function isChordLine(line) {
    const trimmed = line.trim();
    
    // Empty lines are not chord lines
    if (trimmed.length === 0) return false;
    
    // Section headers are not chord lines
    if (trimmed.startsWith('[') && trimmed.endsWith(']')) return false;
    
    // Simple chord patterns - much more permissive
    const basicChordPattern = /\b[A-G][#b]?(m|maj|min|sus|aug|dim|add|[0-9])*\b/g;
    const chordMatches = trimmed.match(basicChordPattern);
    
    if (!chordMatches) return false;
    
    // Count words in the line
    const words = trimmed.split(/\s+/).filter(word => word.length > 0);
    const chordCount = chordMatches.length;
    
    // Very simple rules:
    // 1. If more than half the words are chords, it's a chord line
    // 2. If it's a short line (≤ 20 chars) with any chords, it's probably chords
    // 3. If it has 2+ chords and no common lyrics words, it's chords
    
    const chordRatio = chordCount / words.length;
    const isShort = trimmed.length <= 20;
    const hasCommonLyrics = /\b(the|and|you|me|my|i|a|to|in|is|of|for|with|will|love|lord|jesus|your|than|all|name)\b/i.test(trimmed);
    
    // Chord line if:
    return (chordRatio >= 0.5) ||                    // More than half words are chords
           (isShort && chordCount >= 1) ||          // Short line with any chords
           (chordCount >= 2 && !hasCommonLyrics);   // Multiple chords, no lyrics words
}

module.exports = {
    generatePDF,
    isChordLine
};
